:py:mod:`gemact.lossmodel`
==========================

.. py:module:: gemact.lossmodel


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gemact.lossmodel.PolicyStructure
   gemact.lossmodel.Layer
   gemact.lossmodel.LayerTower
   gemact.lossmodel.Frequency
   gemact.lossmodel.Severity
   gemact.lossmodel.LossModel




Attributes
~~~~~~~~~~

.. autoapisummary::

   gemact.lossmodel.logger


.. py:data:: logger
   

   

.. py:class:: PolicyStructure(layers=None)

   Policy structure component of a loss model.

   :param layers: Non-proportional layer (default is infinity-xs-0 layer).
   :type layers: ``Layer``, ``LayerTower``, ``list``

   .. py:property:: layers


   .. py:property:: length


   .. py:method:: index_to_layer_name(idx)


   .. py:method:: layer_name_to_index(name)



.. py:class:: Layer(cover=float('inf'), deductible=0, aggr_cover=float('inf'), aggr_deductible=0, n_reinst=float('inf'), reinst_loading=0, maintenance_deductible=0, share=1, basis='regular')

   Policy structure non-proportional layer.

   :param deductible: each-and-every-loss (non-ranking) deductible, also referred to as retention or priority (default value is 0).
   :type deductible: ``int`` or ``float``
   :param cover: each-and-every-loss cover, also referred to as limit (default value is infinity). Cover plus deductible is the upper priority or severity 'exit point'.
   :type cover: ``int`` or ``float``
   :param aggr_deductible: aggregate deductible (default value is 0). 
   :type aggr_deductible: ``int`` or ``float``
   :param aggr_cover: aggregate cover, also referred to as aggregate limit (default is infinity).
   :type aggr_cover: ``int`` or ``float``
   :param n_reinst: Number of reinstatements (default value is infinity).
                   When reinstatements are free (loadings = 0), an alternative parametrization is aggregate cover = (number of reinstatement + 1) * cover.
                   E.g. When the number of reinstatements = 0, the aggregate cover is equal to the cover,
                   when number of reinstatements is infinity there is no aggregate cover
                   (the aggregate cover is infinity).
   :type n_reinst: ``int``
   :param reinst_loading: loadings of reinstatements layers (default value is 0), typically a value in [0, 1].
   :type reinst_loading: ``int`` or ``float`` or ``np.array``
   :param maintenance_deductible: maintenance deductible, sometimes referred to as residual each-and-every-loss deductible (default is 0). Non-zero maintenance deductible applies to retention layers only.
   :type maintenance_deductible: ``int`` or ``float``
   :param share: Partecipation share of the layer (default is 1).
   :type share: ``float``
   :param basis: layer basis (default is 'regular'). One of 'regular', 'drop-down', 'stretch-down'. 
   :type basis: ``string``

   .. py:property:: name


   .. py:property:: deductible


   .. py:property:: cover


   .. py:property:: aggr_deductible


   .. py:property:: n_reinst


   .. py:property:: reinst_loading


   .. py:property:: aggr_cover


   .. py:property:: manteinance_deductible


   .. py:property:: share


   .. py:property:: basis


   .. py:property:: category


   .. py:property:: exit_point


   .. py:property:: identifier


   .. py:method:: specs()
      :staticmethod:

      Method (static) returning layer specifications names.

      :return: layer specifications names.
      :rtype: ``set``


   .. py:method:: _check_and_set_category()

      Method that check and set the category of the layer.

      :return: Void.
      :rtype: ``None``



.. py:class:: LayerTower(*args)

   Bases: :py:obj:`list`

   Policy structure tower of non-proportional layers.

   :param \**args:
       See below

   :Keyword Arguments:
       * *args* (``Layers``) --
         Layer tower elements.

   .. py:method:: append(item)

      Append object to the end of the list.


   .. py:method:: insert(item)

      Insert object before index.


   .. py:method:: extend(*args)

      Extend list by appending elements from the iterable.


   .. py:method:: sort(key='deductible')

      Stable sort *IN PLACE*.


   .. py:method:: remove_layer_loading()


   .. py:method:: set_and_check_tower()


   .. py:method:: remove_duplicates()



.. py:class:: Frequency(dist, par)

   Frequency component of the loss models underlying the collective risk model.

   :param dist: name of the frequency distribution.
   :type dist: ``str``
   :param par: parameters of the frequency distribution.
   :type par: ``dict``

   .. py:property:: dist


   .. py:property:: par


   .. py:property:: p0


   .. py:property:: model


   .. py:method:: abp0g0(fj)

      Parameters of the frequency distribution according to the (a, b, k) parametrization,
      the probability generating function computed in zero given the discrete severity probs,
      and the probability of the distribution in zero.

      :param fj: discretized severity distribution probabilities.
      :type fj: ``numpy.ndarray``

      :return: a, b, probability in zero and aggregate cost probability in zero.
      :rtype: ``tuple``



.. py:class:: Severity(dist, par)

   Severity component of the loss models underlying the collective risk model.

   :param dist: name of the frequency distribution.
   :type dist: ``str``
   :param par: parameters of the frequency distribution.
   :type par: ``dict``

   .. py:property:: dist


   .. py:property:: par


   .. py:property:: loc


   .. py:property:: model


   .. py:method:: excess_frequency(x, base_frequency=100)

      Expected excess frequency function, i.e. expected frequency in excess of a given threshold.

      :param x: value where excess frequency is evaluated.
      :type x: ``float``
      :param base_frequency: frequency at origin (default is 100). Optional.
      :type base_frequency: ``int``, ``float``
      :return: excess frequency.
      :rtype: ``numpy.float`` or ``float``


   .. py:method:: return_period(x, base_frequency=100)

      Expected return period, given a base frequency.

      :param x: value whose return period is evaluated.
      :type x: ``float``
      :param base_frequency: frequency at origin (default is 100). Optional.
      :type base_frequency: ``int``, ``float``
      :return: return period.
      :rtype: ``numpy.float`` or ``float``


   .. py:method:: stop_loss_transformation(cover, deductible, size=50000)

      Approximated stop loss transformation function.
      General method for severity class, overridden by distribution specific implementation if available.

      :param cover: cover, also referred to as limit. cover plus deductible is the upper priority or severity 'exit point'.
      :type cover: ``int``, ``float``
      :param deductible: deductible, also referred to as retention or priority.
      :type deductible: ``int``, ``float``
      :param size: inner random variates sample size to approximate the integral (default is 50000).
      :type size: ``int``, optional
      :return: stop_loss_transformation value.
      :rtype: ``numpy.float``


   .. py:method:: discretize(discr_method, n_discr_nodes, discr_step, cover, deductible)

      Severity discretization according to the discretization method selected by the user.

      :param deductible: deductible, also referred to as retention or priority.
      :type deductible: ``int`` or ``float``
      :param cover: cover, also referred to as limit.
      :type cover: ``int`` or ``float``
      :param discr_method: severity discretization method. One of 'massdispersal', 'localmoments'.
      :type discr_method: ``str``
      :param discr_step: severity discretization step.
      :type discr_step: ``float``
      :param n_discr_nodes: number of nodes of the discretized severity.
      :type n_discr_nodes: ``int``
      :return: discrete severity, nodes sequence and discrete probabilities.
      :rtype: ``dict``



.. py:class:: LossModel(severity, frequency, policystructure=PolicyStructure(), aggr_loss_dist_method=None, n_sim=10000, tilt=False, tilt_value=0, random_state=None, n_aggr_dist_nodes=20000, sev_discr_method='localmoments', n_sev_discr_nodes=None, sev_discr_step=None)

   Loss model for (re)insurance costing and risk modeling using a collective risk model framework.

   :param aggr_loss_dist_method: computational method to approximate the aggregate loss distribution.
                                 One of Fast Fourier Transform ('fft'),
                                 Panjer recursion ('recursion') and Monte Carlo simulation ('mc').
   :type aggr_loss_dist_method: ``str``
   :param n_sim: number of simulations of Monte Carlo (mc) method for the aggregate loss distribution approximation.
   :type n_sim: ``int``
   :param tilt: whether tilting of fft is present or not (default is 0).
   :type tilt: ``bool``
   :param tilt_value: tilting parameter value of fft method for the aggregate loss distribution approximation.
   :type tilt_value: ``float``
   :param random_state: random state for the random number generator in mc.
   :type random_state: ``int``, optional
   :param n_aggr_dist_nodes: number of nodes in the approximated aggregate loss distribution.
   :type n_aggr_dist_nodes: ``int``
   :param sev_discr_method: severity discretization method. One of 'massdispersal', 'localmoments'.
   :type sev_discr_method: ``str``
   :param sev_discr_step: severity discretization step.
   :type sev_discr_step: ``float``
   :param n_sev_discr_nodes: number of nodes of the discretized severity.
   :type n_sev_discr_nodes: ``int``

   .. py:property:: severity


   .. py:property:: frequency


   .. py:property:: policystructure


   .. py:property:: aggr_loss_dist_method


   .. py:property:: n_sim


   .. py:property:: random_state


   .. py:property:: n_aggr_dist_nodes


   .. py:property:: tilt


   .. py:property:: tilt_value


   .. py:property:: sev_discr_method


   .. py:property:: n_sev_discr_nodes


   .. py:property:: sev_discr_step


   .. py:property:: dist


   .. py:property:: pure_premium


   .. py:method:: dist_calculate(aggr_loss_dist_method=None, n_aggr_dist_nodes=None, n_sim=None, random_state=None, sev_discr_method=None, sev_discr_step=None, n_sev_discr_nodes=None, tilt=None, tilt_value=None)

      Approximate the aggregate loss distributions of each policystructure layer.
      Distributions can be accessed via the ``dist`` property,
      which is a list of ``distributions.PWC`` objects, each one representing a aggregate loss distribution.

      :param aggr_loss_dist_method: computational method to approximate the aggregate loss distribution.
                                    One of Fast Fourier Transform ('fft'), Panjer recursion ('recursion')
                                    and Monte Carlo simulation ('mc'), optional (default 'mc').
      :type aggr_loss_dist_method: ``str``
      :param n_aggr_dist_nodes: number of nodes in the approximated aggregate loss distribution.
                                Remark: before application of eventual aggregate conditions.
      :type n_aggr_dist_nodes: ``int``
      :param n_sim: number of simulations of Monte Carlo (mc) method
                    for the aggregate loss distribution approximation, optional (default is 10000).
      :type n_sim: ``int``
      :param random_state: random state for the random number generator in MC, optional.
      :type random_state: ``int``
      :param sev_discr_method: severity discretization method, optional (default is 'localmoments').
      :type sev_discr_method: ``str``
      :param sev_discr_step: severity discretization step.
      :type sev_discr_step: ``float``
      :param n_sev_discr_nodes: number of nodes of the discretized severity.
      :type n_sev_discr_nodes: ``int``
      :param tilt: whether tilting of fft is present or not, optional (default is 0).
      :type tilt: ``bool``
      :param tilt_value: tilting parameter value of fft method for the aggregate loss distribution approximation,
                         optional.
      :type tilt_value: ``float``
      :return: void
      :rtype: ``None``


   .. py:method:: _apply_aggr_conditions(dist, cover, deductible)

      Apply aggregate conditions, i.e. aggregate deductble and aggregate cover, to a aggregate loss distribution.

      :param dist: aggregate loss distribution (before aggregate conditions).
      :type dist: ``dict``
      :param cover: (aggregate) cover.
      :type cover: ``int`` or ``float``
      :param deductible: (aggregate) deductible.
      :type deductible: ``int`` or ``float``
      :return: aggregate loss distribution after aggregate conditions.
      :rtype: ``dict``


   .. py:method:: moment(central=False, n=1, idx=0)

      Aggregate loss distribution moment of order n.

      :param central: ``True`` if the moment is central, ``False`` if the moment is raw.
      :type central: ``bool``
      :param n: order of the moment, optional (default is 1).
      :type n: ``int``
      :param idx: list index corresponding to the layer loss distribution of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: moment of order n.
      :rtype: ``numpy.float64``


   .. py:method:: ppf(q, idx=0)

      Aggregate loss distribution percent point function, a.k.a. the quantile function,
      inverse of the cumulative distribution function.

      :param q: probability.
      :type q: ``float`` or ``numpy.ndarray``
      :param idx: list index corresponding to the layer loss distribution of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: quantile.
      :rtype: ``numpy.float64`` or ``numpy.ndarray``


   .. py:method:: cdf(x, idx=0)

      Aggregate loss distribution cumulative distribution function.

      :param x: quantiles where the cumulative distribution function is evaluated.
      :type x: ``float`` or ``int`` or ``numpy.ndarray``
      :param idx: list index corresponding to the layer loss distribution of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: cumulative distribution function.
      :rtype: ``numpy.float64`` or ``numpy.ndarray``


   .. py:method:: rvs(size=1, random_state=None, idx=0)

      Random variates generator function.

      :param size: random variates sample size, optional (default is 1).
      :type size: ``int``
      :param random_state: random state for the random number generator, optional (no default).
      :type random_state: ``int``
      :param idx: list index corresponding to the layer loss distribution of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: random variates.
      :rtype: ``numpy.int`` or ``numpy.ndarray``


   .. py:method:: mean(idx=0)

      Mean of the aggregate loss.

      :param idx: list index corresponding to the layer loss distribution of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: mean of the aggregate loss.
      :rtype: ``numpy.float64``


   .. py:method:: std(idx=0)

      Standard deviation of the aggregate loss.

      :param n: list index corresponding to the layer loss distribution of interest (default is 0).
                See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type n: ``idx``
      :return: standard deviation of the aggregate loss.
      :rtype: ``numpy.float64``


   .. py:method:: skewness(idx=0)

      Skewness of the aggregate loss.

      :param idx: list index corresponding to the layer loss distribution of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: skewness of the aggregate loss.
      :rtype: ``numpy.float64``


   .. py:method:: _reinstatements_costing_adjuster(dist, aggr_deductible, n_reinst, cover, reinst_loading)

      Reinstatements costing premium adjustment. Multiplicative factor.

      :param dist: aggregate loss distribution (before aggregate conditions).
      :type dist: ``dict``
      :param aggr_deductible: aggregate deductible.
      :type aggr_deductible: ``int`` or ``float``
      :param n_reinst: Number of reinstatements.
      :type n_reinst: ``int``
      :param cover: cover.
      :type cover: ``int`` or ``float``
      :param reinst_loading: loadings of reinstatements layers (default value is 0), typically a value in [0, 1].
      :type reinst_loading: ``int`` or ``float`` or ``np.array``
      :return: reinstatements costing adjustment.
      :rtype: ``float`` or ``numpy.ndarray``


   .. py:method:: _stop_loss_costing(dist, cover, deductible)

      Stop loss costing via stop loss transformation.
      Compute the expected value of layer transformed aggregate loss distribution.

      :param dist: aggregate loss distribution (before aggregate conditions).
      :type dist: ``dict``
      :param cover: cover.
      :type cover: ``int`` or ``float`` or ``numpy.ndarray``
      :param deductible: deductible.
      :type deductible: ``int`` or ``float`` or ``numpy.ndarray``
      :return: expected value of layer transformed aggregate loss distribution.
      :rtype: ``numpy.ndarray``


   .. py:method:: costing()

      Actuarial costing (also referred to as risk costing) of (re)insurance covers,
      such as quota share, excess-of-loss (including reinstatements or aggregate conditions) and stop loss.

      :return: Void
      :rtype: ``None``


   .. py:method:: print_costing_specs(idx=0)

      Print costing information of a given layer (specified via its index).

      :param idx: index corresponding to the policystructure layer of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: Void
      :rtype: ``None``


   .. py:method:: print_aggr_loss_method_specs(idx=0)

      Print information of the aggregate loss distribution approximation for a given layer (specified via its index).

      :param idx: index corresponding to the policystructure layer of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: Void
      :rtype: None


   .. py:method:: print_policy_layer_specs(idx=0)

      Print policy structure information of a given layer (specified via its index).

      :param idx: index corresponding to the policystructure layer of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: Void
      :rtype: None


   .. py:method:: _check_dist(idx=0)

      Check that the aggregate loss distribution is not missing.
      Helper method called before executing other methods based on ``dist`` property.

      :param idx: index corresponding to the policystructure layer of interest (default is 0).
                  See 'index_to_layer_name' and 'layer_name_to_index' PolicyStructure methods.
      :type idx: ``int``
      :return: Void
      :rtype: None



